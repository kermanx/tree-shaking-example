function e(t,n=[]){return(...r)=>(n=>n.length>=t.length?t(...n):e(t,n))([...n,...r])}const t=Array.isArray;function n(...e){if(e.length===0)throw Error(`compose requires at least one argument`);return(...t)=>{let n=e.slice();if(n.length>0){let e=n.pop()(...t);for(;n.length>0;)e=n.pop()(e);return e}}}const r=Object.keys;function i(e,n,i){if(i===void 0)return n;if(t(i)){let t=0,r=i.length;for(;t<r;)n=e(n,i[t],t,i),t++}else{let t=0,a=r(i),o=a.length;for(;t<o;){let r=a[t];n=e(n,r,i[r],i),t++}}return n}const a=e(i);function o(e,t){let n={};for(let r in t)e(t[r],r,t)&&(n[r]=t[r]);return n}function s(e,n){if(arguments.length===1)return t=>s(e,t);if(!n)return[];if(!t(n))return o(e,n);let r=0,i=n.length,a=[];for(;r<i;){let t=n[r];e(t,r)&&a.push(t),r++}return a}function c(e,t){return arguments.length===1?t=>c(e,t):e*t}a(c,1);function l(e,t){if(arguments.length===1)return t=>l(e,t);if(Number.isNaN(Number(e))||Number.isNaN(Number(t)))throw TypeError(`Both arguments to range must be numbers`);if(t<e)return[];let n=t-e,r=Array(n);for(let t=0;t<n;t++)r[t]=e+t;return r}function u(e){return e%2==0}function d(e){return n(s(u),l(2))(e)}const f=d(10).join(`,`);export{f as answer};